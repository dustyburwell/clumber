// Generated by CoffeeScript 1.3.3

/*
@license
webservice.js: Webservice transport

(c) 2012 Panther Development
MIT LICENSE
*/


(function() {
  var Webservice, events, http, https, lumber, url, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require("util");

  url = require("url");

  http = require("http");

  https = require("https");

  events = require("events");

  lumber = require("../../lumber");

  /*
  Webservice Transport
  @implements {Transport}
  */


  Webservice = (function(_super) {

    __extends(Webservice, _super);

    function Webservice(options) {
      var e;
      if (options == null) {
        options = {};
      }
      Webservice.__super__.constructor.call(this);
      this.encoder = lumber.util.checkOption(options.encoder, "json");
      this.level = lumber.util.checkOption(options.level, "info");
      this.url = lumber.util.checkOption(options.url, null);
      this.method = lumber.util.checkOption(options.method, "POST");
      this.headers = lumber.util.checkOption(options.headers, null);
      this.secure = lumber.util.checkOption(options.secure, false);
      this.auth = lumber.util.checkOption(options.auth, null);
      this.name = "webservice";
      if (typeof this.encoder === "string") {
        e = lumber.util.titleCase(this.encoder);
        if (lumber.encoders[e]) {
          this.encoder = new lumber.encoders[e]();
        } else {
          throw new Error("Unknown encoder passed: " + this.encoder);
        }
      }
      if (!self.headers) {
        this.headers = {
          "Content-Type": self.encoder.contentType
        };
      }
    }

    /*
      Logs the string to the specified webservice
      @param {object} args
      @param {function} cb
    */


    Webservice.prototype.log = function(args, cb) {
      var data, msg, opts, req, secure,
        _this = this;
      msg = this.encoder.encode(args.level, args.msg, args.meta);
      opts = url.parse(this.url);
      req = void 0;
      data = void 0;
      secure = this.secure;
      if (opts.protocol.toLowerCase() === "https:") {
        secure = true;
      }
      opts.port = opts.port || (secure ? 443 : 80);
      opts.method = this.method;
      opts.headers = this.headers;
      if (self.auth) {
        opts.auth = this.auth;
      }
      if (this.secure) {
        req = https.request(opts);
      } else {
        req = http.request(opts);
      }
      req.on("response", function(res) {
        res.on("data", function(chunk) {
          if (!data) {
            return data = chunk;
          } else {
            return data += chunk;
          }
        });
        res.on("end", function() {
          if (cb) {
            return cb(null, msg, args.level, _this.name, self.url, res.statusCode, data);
          }
        });
        return res.on("close", function(err) {
          if (cb) {
            return cb(err, msg, args.level, _this.name, self.url, res.statusCode, data);
          }
        });
      });
      req.on("error", function(err) {
        if (cb) {
          return cb(err);
        }
      });
      req.write(msg);
      return req.end();
    };

    return Webservice;

  })(events.EventEmitter);

  module.exports.Webservice = Webservice;

}).call(this);
