// Generated by CoffeeScript 1.3.3

/*
@license
json.js: JSON Encoder

(c) 2012 Panther Development
MIT LICENSE
*/


(function() {
  var Json, common, dateFormat, events, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require("util");

  events = require("events");

  dateFormat = require("dateformat");

  common = require("../common");

  /*
  JSON Encoder
  @constructor
  @implements {Encoder}
  */


  Json = (function(_super) {

    __extends(Json, _super);

    function Json(options) {
      Json.__super__.constructor.call(this);
      options = options || {};
      this.colorize = common.checkOption(options.colorize, false);
      this.timestamp = common.checkOption(options.timestamp, true);
      this.headFormat = common.checkOption(options.headFormat, "%L");
      this.dateFormat = common.checkOption(options.dateFormat, "isoDateTime");
      this.contentType = "application/json";
      this.encoding = "utf8";
    }

    /*
      Encodes the passed string into JSON format
      @return {string} Encoded string
      @param {string} level The level of this message
      @param {string} msg The message to encode
      @param {object} meta The metadata of this log
    */


    Json.prototype.encode = function(level, msg, meta) {
      var head, obj, self, time;
      self = this;
      head = this.headFormat.replace("%l", level.toLowerCase()).replace("%L", level.toUpperCase());
      time = dateFormat(new Date(), this.dateFormat);
      obj = {
        level: level,
        head: head,
        message: msg
      };
      if (this.timestamp) {
        obj.timestamp = time;
      }
      if (meta) {
        obj.meta = meta;
      }
      return JSON.stringify(obj);
    };

    return Json;

  })(events.EventEmitter);

  module.exports = Json;

}).call(this);
